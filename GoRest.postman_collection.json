{
	"info": {
		"_postman_id": "a7998ddd-3ed5-4fcd-a943-6456f6839ea4",
		"name": "GoRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20426689",
		"_collection_link": "https://red-firefly-419905.postman.co/workspace/Private~abce15db-25f2-49d2-9b96-c6876f028344/collection/20426689-a7998ddd-3ed5-4fcd-a943-6456f6839ea4?action=share&source=collection_link&creator=20426689"
	},
	"item": [
		{
			"name": "Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const schema = {",
							"  \"type\": \"array\",",
							"  \"items\": {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"      \"id\": {",
							"        \"type\": \"integer\"",
							"      },",
							"      \"name\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"email\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"gender\": {",
							"        \"type\": \"string\"",
							"      },",
							"      \"status\": {",
							"        \"type\": \"string\"",
							"      }",
							"    },",
							"    \"required\": [\"id\", \"name\", \"email\", \"gender\", \"status\"]",
							"  }",
							"  };",
							"",
							"  pm.test(\"Json schema validation test\",() => {",
							"    pm.response.to.have.jsonSchema(schema)",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Url}}",
					"host": [
						"{{Url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();",
							"",
							"pm.collectionVariables.set(\"id\",responseData.id);",
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"Validate the response schema for id, name, email, gender, and status properties\", function () {",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('email');",
							"    pm.expect(responseData).to.have.property('gender');",
							"    pm.expect(responseData).to.have.property('status');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n     \"name\":\"{{$randomFullName}}\", \n     \"gender\":\"male\", \n     \"email\":\"{{$randomEmail}}\", \n     \"status\":\"active\"\n}\n\n     \n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Url}}",
					"host": [
						"{{Url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get/id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"const schema = {",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"id\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"email\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"gender\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"status\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"id\",",
							"    \"name\",",
							"    \"email\",",
							"    \"gender\",",
							"    \"status\"",
							"  ]",
							"}",
							"",
							"pm.test(\"Json schema validation test\",() => {",
							"    pm.response.to.have.jsonSchema(schema)",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Url}}/{{id}}",
					"host": [
						"{{Url}}"
					],
					"path": [
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n     \"name\":\"{{$randomFullName}}\", \n     \"gender\":\"male\", \n     \"email\":\"{{$randomEmail}}\", \n     \"status\":\"active\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Url}}/{{id}}",
					"host": [
						"{{Url}}"
					],
					"path": [
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomTestEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");",
							"",
							"pm.collectionVariables.set(\"randomTestEmail\", randomTestEmail);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var randomTestEmail = pm.collectionVariables.get(\"randomTestEmail\");",
							"var jsonData = pm.response.json();",
							"pm.test(\"Email update test\",()=> {",
							"    pm.expect(jsonData.email).to.eql(randomTestEmail);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"{{randomTestEmail}}\"   \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Url}}/{{id}}",
					"host": [
						"{{Url}}"
					],
					"path": [
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AccessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Url}}/{{id}}",
					"host": [
						"{{Url}}"
					],
					"path": [
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "randomTestEmail",
			"value": ""
		}
	]
}